#!/usr/bin/env python3

# Usage:
#   py_package_versions.py download_pypi_packages
#     Downloads needed packages from PyPI.
#
#   py_package_versions.py write_package_version_file
#

# Find the versions of htmltools, shiny, and other python packages that we need to put
# in shinylive/packages/, and write to py_package_versions.ts.

import json
import os
import sys

# TODO: This data should probably live in a separate file.
package_versions: dict[str, dict[str, str]] = {
    "anyio": {"name": "anyio", "version": "3.4.0", "source": "pypi"},
    "idna": {"name": "idna", "version": "3.3", "source": "pypi"},
    "sniffio": {"name": "sniffio", "version": "1.2.0", "source": "pypi"},
    "starlette": {"name": "starlette", "version": "0.17.1", "source": "pypi"},
}

this_dir = os.path.dirname(os.path.abspath(__file__))
package_source_dir = os.path.join(this_dir, "packages")


def download_pypi_packages(package_output_dir: str):
    pypi_packages = dict(
        filter(lambda x: x[1]["source"] == "pypi", package_versions.items())
    )
    all_packages = " ".join(
        [
            f'{pypi_packages[k]["name"]}=={pypi_packages[k]["version"]}'
            for k in pypi_packages
        ]
    )
    command = f"pip download --dest {package_output_dir} {all_packages}"
    print(command)
    os.system(command)


def write_package_version_file():
    sys.path.insert(0, os.path.join(package_source_dir, "./py-htmltools"))
    sys.path.insert(0, os.path.join(package_source_dir, "./py-shiny"))

    import htmltools
    import shiny

    package_versions.update(
        {
            "htmltools": {
                "name": "htmltools",
                "version": htmltools.__version__,
                "source": "local",
            },
            "shiny": {"name": "shiny", "version": shiny.__version__, "source": "local"},
        }
    )

    with open(os.path.join(this_dir, "py_package_versions.ts"), "w") as outfile:
        print("Writing package version information to py_package_versions.ts")
        outfile.write("// Generated by packages/find_versions.py. Do not edit.\n")
        outfile.write("export const versions = ")
        json.dump(
            package_versions,
            outfile,
            indent=2,
        )


if __name__ == "__main__":

    def print_usage_and_exit():
        print(
            """
Usage:
    py_package_versions.py download_pypi_packages [destdir]
    py_package_versions.py write_package_version_file
"""
        )
        sys.exit(1)

    if len(sys.argv) < 2:
        print_usage_and_exit()

    if sys.argv[1] == "download_pypi_packages":
        if len(sys.argv) >= 3:
            package_source_dir = sys.argv[2]
        else:
            package_source_dir = "."
        download_pypi_packages(package_source_dir)

    elif sys.argv[1] == "write_package_version_file":
        write_package_version_file()

    else:
        print_usage_and_exit()
