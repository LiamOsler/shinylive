---
title: PyShiny component examples in Quarto
format:
  html:
    include-in-header: quarto-header.html
    css: quarto-style.css
---

### Editor with app

Code editor with live running Shiny app:

```{.pyshiny}
from shiny import *

app_ui = ui.page_fluid(
    ui.input_slider("n", "N", 0, 100, 40),
    ui.output_text_verbatim("txt"),
)

def server(input, output, session):
    @output()
    @render_text()
    def txt():
        return f"The value of n*2 is {input.n() * 2}"

# This is a shiny.App object. It must be named `app`.
app = App(app_ui, server)

```

With components stacked vertically:

```{.pyshiny}
#| layout: vertical

from shiny import *

app_ui = ui.page_fluid(
    ui.input_slider("n", "N", 0, 100, 40),
    ui.output_text_verbatim("txt"),
)

def server(input, output, session):
    @output()
    @render_text()
    def txt():
        return f"The value of n*2 is {input.n() * 2}"

# This is a shiny.App object. It must be named `app`.
app = App(app_ui, server)

```


### Standalone app

Shiny app running without editor:

```{.pyshinyapp style="height:180px;"}
from shiny import *

app_ui = ui.page_fluid(
    ui.input_slider("n", "N", 0, 100, 40),
    ui.output_text_verbatim("txt"),
)

def server(input, output, session):
    @output()
    @render_text()
    def txt():
        return f"n*5 is {input.n() * 5}"

app = App(app_ui, server)

```

### Notebook-style code cells

The code in these cells can be edited and re-run by clicking on the icon in the upper right, or by pressing ⌘/Ctrl-Shift-Enter.

```{.pycell}
def add(x, y):
    return x + y

add(3, 12)
```

And another cell. The cells run in the order they are defined on the page.


```{.pycell}
sums = map(add, [1, 2, 3], [4, 5, 6])
list(sums)
```

This is a normal Quarto code block, which does not run the code. (You can try copying and pasting the code into one of the runnable cells above, and then running it. Note that it may take a few seconds to run, because of time spent loading Pandas.)

```{.python}
import pandas as pd

df = pd.DataFrame({
    "col1": [1, 0, 4, 10, 9],
    "col2": [7, 100, 12, 5, 33],
    "col3": ["group1", "group2", "group3", "group1", "group3"],
})

df
```

### Editor and terminal

Run selected code or current line with ⌘/Ctrl-Enter; run the entire file with ⌘/Ctrl-Shift-Enter.

```{.pyterminal style="height:350px;"}
sums = map(add, [1, 2, 3], [4, 5, 6])
list(sums)

```
