name: Build shinylive

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  release:
    types: [published]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]
      fail-fast: false

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Check out submodules
        run: |
          make submodules

      # =====================================================
      # Build
      # =====================================================
      # - uses: quarto-dev/quarto-actions/setup@v2

      - name: Build shinylive
        run: |
          make all

      - name: Upload Quarto site artifact
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-pages-artifact@v1
        with:
          path: "site/"

      # =====================================================
      # Upload shinylive bundle on release
      # =====================================================

      # Ensure that if the version in package.json is "0.0.5", then release tag
      # is "v0.0.5".
      - name: Check that version number matches release tag
        if: github.event_name == 'release'
        run: |
          if [ "${{github.ref}}" != refs/tags/v`node -p "require('./package.json').version"` ]; then
            echo Version in package.json, prepended with \"refs/tags/v\", is \"v`node -p "require('./package.json').version"`\", which does not match git tag \"${{github.ref}}\".
            exit 1
          fi

      - name: Build shinylive deployment bundle for release
        if: github.event_name == 'release'
        run: |
          make dist

      - name: Upload shinylive bundle to release
        if: github.event_name == 'release'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: "dist/*.tar.gz"
          tag: ${{ github.ref }}
          file_glob: true
          overwrite: true


  deploy:
    if: github.ref == 'refs/heads/main'
    needs: build

    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment originates from an appropriate source

    # Deploy to the github-pages environment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    # Specify runner + deployment step
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
